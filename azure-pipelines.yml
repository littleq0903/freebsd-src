trigger:
- main

# Define a parameter for the architecture
parameters:
- name: arch
  displayName: 'Architecture'
  type: string
  default: 'amd64'
  values:
    - 'amd64'
    - 'arm'
    - 'arm64'
    - 'i386'
    - 'powerpc'
    - 'powerpc64'
    - 'powerpc64le'
    - 'riscv'

variables:
  buildId: $(Build.BuildId)  # Assign the build ID to a variable

jobs:
- job: Build_OS_Image
  displayName: 'Build OS Image Job'
  timeoutInMinutes: 0  # Set global timeout to unlimited
  pool:
    name: BSD-Pool

  steps:
  - script: |
      sudo cp -v -R $(Build.SourcesDirectory)/** /usr/src
    displayName: 'Copy source code to /usr/src'

  # Set the architecture-specific variables directly in the steps
  - script: |
      TARGET_ARCH="amd64"  # Default
      if [[ '${{ parameters.arch }}' == 'amd64' ]]; then
        TARGET_ARCH="amd64"
      elif [[ '${{ parameters.arch }}' == 'arm' ]]; then
        TARGET_ARCH="armv7"
      elif [[ '${{ parameters.arch }}' == 'arm64' ]]; then
        TARGET_ARCH="aarch64"
      elif [[ '${{ parameters.arch }}' == 'i386' ]]; then
        TARGET_ARCH="i386"
      elif [[ '${{ parameters.arch }}' == 'powerpc' ]]; then
        TARGET_ARCH="powerpc"
      elif [[ '${{ parameters.arch }}' == 'powerpc64' ]]; then
        TARGET_ARCH="powerpc64"
      elif [[ '${{ parameters.arch }}' == 'powerpc64le' ]]; then
        TARGET_ARCH="powerpc64le"
      elif [[ '${{ parameters.arch }}' == 'riscv' ]]; then
        TARGET_ARCH="riscv64"
      fi
      
      # Export TARGET_ARCH as a pipeline variable for later steps
      echo "##vso[task.setvariable variable=TARGET_ARCH]$TARGET_ARCH"

      # Run the build with the resolved TARGET and TARGET_ARCH
      sudo make -j$(sysctl -n kern.smp.cpus) -DWITHOUT_CLEAN=yes TARGET=${{ parameters.arch }} TARGET_ARCH=$TARGET_ARCH buildworld buildkernel
    displayName: 'Build world and kernel'

  - script: |
      # Build Azure image
      cd /usr/src/release
      sudo make CLOUDWARE=AZURE -DWITH_CLOUDWARE TARGET=${{ parameters.arch }} TARGET_ARCH=$TARGET_ARCH cw-azure
    displayName: 'Build Azure image'

  - task: PublishPipelineArtifact@1
    inputs:
      targetPath: '/usr/obj/usr/src/${{ parameters.arch }}.$(TARGET_ARCH)/release/azure.ufs.vhdf'
      artifactName: 'azure-image'
      publishLocation: 'pipeline'
    displayName: 'Publish Azure image artifact'

- job: Upload_Image_to_Azure_Community_Gallery
  displayName: 'Upload Image to Azure Community Image Gallery'
  dependsOn: Build_OS_Image
  pool:
    name: Default

  steps:
  - task: DownloadPipelineArtifact@2
    inputs:
      artifactName: 'azure-image'
    displayName: 'Download Azure image artifact'

  - task: AzureCLI@2
    inputs:
      azureSubscription: '8f5d9c09-fe03-4887-968e-f797aa249c7b'  # Replace with your Azure service connection name
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        set -e  # Exit on any error

        # Variables (replace these with your actual values)
        RESOURCE_GROUP="yuas-bsd-rg"
        LOCATION="eastus"
        GALLERY_NAME="FreeBSDTestingGalleryYuas"
        IMAGE_DEFINITION="FreeBSD-14.0-Testing"
        IMAGE_VERSION="1.0.$(buildId)"
        PUBLISHER="ColinSuMSFT"
        OFFER="FREEBSD_14"
        SKU="14.0-Testing"
        STORAGE_ACCOUNT="yuassa$(date +%s)"  # Unique storage account name
        CONTAINER_NAME="vhds"

        # Create resource group if it doesn't exist
        az group create --name $RESOURCE_GROUP --location $LOCATION

        # Create storage account
        az storage account create \
          --name $STORAGE_ACCOUNT \
          --resource-group $RESOURCE_GROUP \
          --location $LOCATION \
          --sku Standard_LRS

        # Get storage account key
        STORAGE_KEY=$(az storage account keys list \
          --account-name $STORAGE_ACCOUNT \
          --resource-group $RESOURCE_GROUP \
          --query '[0].value' -o tsv)

        # Create container
        az storage container create \
          --name $CONTAINER_NAME \
          --account-name $STORAGE_ACCOUNT \
          --account-key $STORAGE_KEY

        # Upload the VHD file
        az storage blob upload \
          --account-name $STORAGE_ACCOUNT \
          --container-name $CONTAINER_NAME \
          --name "azure.ufs.vhdf" \
          --file "$(Pipeline.Workspace)/azure.ufs.vhdf" \
          --type page \
          --account-key $STORAGE_KEY

        # Create the image gallery if it doesn't exist
        az sig create \
          --resource-group $RESOURCE_GROUP \
          --gallery-name $GALLERY_NAME

        # Create the image definition if it doesn't exist
        az sig image-definition create \
          --resource-group $RESOURCE_GROUP \
          --gallery-name $GALLERY_NAME \
          --gallery-image-definition $IMAGE_DEFINITION \
          --publisher "$PUBLISHER" \
          --offer "$OFFER" \
          --sku "$SKU" \
          --os-type Linux

        # Create the image version
        az sig image-version create \
          --resource-group $RESOURCE_GROUP \
          --gallery-name $GALLERY_NAME \
          --gallery-image-definition $IMAGE_DEFINITION \
          --gallery-image-version $IMAGE_VERSION \
          --os-vhd-uri "https://$STORAGE_ACCOUNT.blob.core.windows.net/$CONTAINER_NAME/azure.ufs.vhdf" \
          --os-vhd-storage-account $STORAGE_ACCOUNT \
          --location $LOCATION \
          --replica-count 1 \
          --storage-account-type Standard_LRS
          
    displayName: 'Upload image to Azure Community Image Gallery'
